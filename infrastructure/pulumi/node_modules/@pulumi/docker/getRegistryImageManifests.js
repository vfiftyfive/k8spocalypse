"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRegistryImageManifestsOutput = exports.getRegistryImageManifests = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Reads the image metadata for each manifest in a Docker multi-arch image from a Docker Registry.
 */
function getRegistryImageManifests(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("docker:index/getRegistryImageManifests:getRegistryImageManifests", {
        "authConfig": args.authConfig,
        "insecureSkipVerify": args.insecureSkipVerify,
        "name": args.name,
    }, opts);
}
exports.getRegistryImageManifests = getRegistryImageManifests;
/**
 * Reads the image metadata for each manifest in a Docker multi-arch image from a Docker Registry.
 */
function getRegistryImageManifestsOutput(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("docker:index/getRegistryImageManifests:getRegistryImageManifests", {
        "authConfig": args.authConfig,
        "insecureSkipVerify": args.insecureSkipVerify,
        "name": args.name,
    }, opts);
}
exports.getRegistryImageManifestsOutput = getRegistryImageManifestsOutput;
//# sourceMappingURL=getRegistryImageManifests.js.map