"use strict";
// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceCIDRPatch = exports.ServiceCIDRList = exports.ServiceCIDR = exports.NetworkPolicyPatch = exports.NetworkPolicyList = exports.NetworkPolicy = exports.IPAddressPatch = exports.IPAddressList = exports.IPAddress = exports.IngressPatch = exports.IngressList = exports.IngressClassPatch = exports.IngressClassList = exports.IngressClass = exports.Ingress = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
exports.Ingress = null;
utilities.lazyLoad(exports, ["Ingress"], () => require("./ingress"));
exports.IngressClass = null;
utilities.lazyLoad(exports, ["IngressClass"], () => require("./ingressClass"));
exports.IngressClassList = null;
utilities.lazyLoad(exports, ["IngressClassList"], () => require("./ingressClassList"));
exports.IngressClassPatch = null;
utilities.lazyLoad(exports, ["IngressClassPatch"], () => require("./ingressClassPatch"));
exports.IngressList = null;
utilities.lazyLoad(exports, ["IngressList"], () => require("./ingressList"));
exports.IngressPatch = null;
utilities.lazyLoad(exports, ["IngressPatch"], () => require("./ingressPatch"));
exports.IPAddress = null;
utilities.lazyLoad(exports, ["IPAddress"], () => require("./ipaddress"));
exports.IPAddressList = null;
utilities.lazyLoad(exports, ["IPAddressList"], () => require("./ipaddressList"));
exports.IPAddressPatch = null;
utilities.lazyLoad(exports, ["IPAddressPatch"], () => require("./ipaddressPatch"));
exports.NetworkPolicy = null;
utilities.lazyLoad(exports, ["NetworkPolicy"], () => require("./networkPolicy"));
exports.NetworkPolicyList = null;
utilities.lazyLoad(exports, ["NetworkPolicyList"], () => require("./networkPolicyList"));
exports.NetworkPolicyPatch = null;
utilities.lazyLoad(exports, ["NetworkPolicyPatch"], () => require("./networkPolicyPatch"));
exports.ServiceCIDR = null;
utilities.lazyLoad(exports, ["ServiceCIDR"], () => require("./serviceCIDR"));
exports.ServiceCIDRList = null;
utilities.lazyLoad(exports, ["ServiceCIDRList"], () => require("./serviceCIDRList"));
exports.ServiceCIDRPatch = null;
utilities.lazyLoad(exports, ["ServiceCIDRPatch"], () => require("./serviceCIDRPatch"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "kubernetes:networking.k8s.io/v1:IPAddress":
                return new exports.IPAddress(name, undefined, { urn });
            case "kubernetes:networking.k8s.io/v1:IPAddressList":
                return new exports.IPAddressList(name, undefined, { urn });
            case "kubernetes:networking.k8s.io/v1:IPAddressPatch":
                return new exports.IPAddressPatch(name, undefined, { urn });
            case "kubernetes:networking.k8s.io/v1:Ingress":
                return new exports.Ingress(name, undefined, { urn });
            case "kubernetes:networking.k8s.io/v1:IngressClass":
                return new exports.IngressClass(name, undefined, { urn });
            case "kubernetes:networking.k8s.io/v1:IngressClassList":
                return new exports.IngressClassList(name, undefined, { urn });
            case "kubernetes:networking.k8s.io/v1:IngressClassPatch":
                return new exports.IngressClassPatch(name, undefined, { urn });
            case "kubernetes:networking.k8s.io/v1:IngressList":
                return new exports.IngressList(name, undefined, { urn });
            case "kubernetes:networking.k8s.io/v1:IngressPatch":
                return new exports.IngressPatch(name, undefined, { urn });
            case "kubernetes:networking.k8s.io/v1:NetworkPolicy":
                return new exports.NetworkPolicy(name, undefined, { urn });
            case "kubernetes:networking.k8s.io/v1:NetworkPolicyList":
                return new exports.NetworkPolicyList(name, undefined, { urn });
            case "kubernetes:networking.k8s.io/v1:NetworkPolicyPatch":
                return new exports.NetworkPolicyPatch(name, undefined, { urn });
            case "kubernetes:networking.k8s.io/v1:ServiceCIDR":
                return new exports.ServiceCIDR(name, undefined, { urn });
            case "kubernetes:networking.k8s.io/v1:ServiceCIDRList":
                return new exports.ServiceCIDRList(name, undefined, { urn });
            case "kubernetes:networking.k8s.io/v1:ServiceCIDRPatch":
                return new exports.ServiceCIDRPatch(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("kubernetes", "networking.k8s.io/v1", _module);
//# sourceMappingURL=index.js.map