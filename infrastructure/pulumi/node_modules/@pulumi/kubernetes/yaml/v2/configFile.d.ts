import * as pulumi from "@pulumi/pulumi";
/**
 * ConfigFile creates a set of Kubernetes resources from a remote or on-disk Kubernetes YAML file.
 * (If you have in-memory YAML a ConfigGroup may be more appropriate.)
 *
 * ## Dependency ordering
 * Sometimes resources must be applied in a specific order. For example, a namespace resource must be
 * created before any namespaced resources, or a Custom Resource Definition (CRD) must be pre-installed.
 *
 * Pulumi uses heuristics to determine which order to apply and delete objects within the ConfigFile.  Pulumi also
 * waits for each object to be fully reconciled, unless `skipAwait` is enabled.
 *
 * ### Explicit Dependency Ordering
 * Pulumi supports the `config.kubernetes.io/depends-on` annotation to declare an explicit dependency on a given resource.
 * The annotation accepts a list of resource references, delimited by commas.
 *
 * Note that references to resources outside the ConfigFile aren't supported.
 *
 * **Resource reference**
 *
 * A resource reference is a string that uniquely identifies a resource.
 *
 * It consists of the group, kind, name, and optionally the namespace, delimited by forward slashes.
 *
 * | Resource Scope   | Format                                         |
 * | :--------------- | :--------------------------------------------- |
 * | namespace-scoped | `<group>/namespaces/<namespace>/<kind>/<name>` |
 * | cluster-scoped   | `<group>/<kind>/<name>`                        |
 *
 * For resources in the “core” group, the empty string is used instead (for example: `/namespaces/test/Pod/pod-a`).
 *
 * ### Ordering across ConfigFiles
 * The `dependsOn` resource option creates a list of explicit dependencies between Pulumi resources.
 * Use it on another resource to make it dependent on the ConfigFile and to wait for the resources within
 * the group to be deployed.
 *
 * A best practice is to deploy each application using its own ConfigFile, especially when that application
 * installs custom resource definitions.
 *
 * ## Example Usage
 * ### Local File
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as k8s from "@pulumi/kubernetes";
 *
 * const example = new k8s.yaml.v2.ConfigFile("example", {
 *     files: ["./manifest.yaml"],
 * });
 * ```
 * {% /examples %}}
 */
export declare class ConfigFile extends pulumi.ComponentResource {
    /**
     * Returns true if the given object is an instance of ConfigFile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is ConfigFile;
    /**
     * Resources created by the ConfigFile.
     */
    readonly resources: pulumi.Output<any[]>;
    /**
     * Create a ConfigFile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ConfigFileArgs, opts?: pulumi.ComponentResourceOptions);
}
/**
 * The set of arguments for constructing a ConfigFile resource.
 */
export interface ConfigFileArgs {
    /**
     * Path or URL to a Kubernetes manifest file. File must exist.
     */
    file: pulumi.Input<string>;
    /**
     * A prefix for the auto-generated resource names. Defaults to the name of the ConfigFile. Example: A resource created with resourcePrefix="foo" would produce a resource named "foo-resourceName".
     */
    resourcePrefix?: pulumi.Input<string>;
    /**
     * Indicates that child resources should skip the await logic.
     */
    skipAwait?: pulumi.Input<boolean>;
}
