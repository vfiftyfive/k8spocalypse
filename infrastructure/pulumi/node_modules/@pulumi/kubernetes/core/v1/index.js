"use strict";
// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServicePatch = exports.ServiceList = exports.ServiceAccountPatch = exports.ServiceAccountList = exports.ServiceAccount = exports.Service = exports.SecretPatch = exports.SecretList = exports.Secret = exports.ResourceQuotaPatch = exports.ResourceQuotaList = exports.ResourceQuota = exports.ReplicationControllerPatch = exports.ReplicationControllerList = exports.ReplicationController = exports.PodTemplatePatch = exports.PodTemplateList = exports.PodTemplate = exports.PodPatch = exports.PodList = exports.Pod = exports.PersistentVolumePatch = exports.PersistentVolumeList = exports.PersistentVolumeClaimPatch = exports.PersistentVolumeClaimList = exports.PersistentVolumeClaim = exports.PersistentVolume = exports.NodePatch = exports.NodeList = exports.Node = exports.NamespacePatch = exports.NamespaceList = exports.Namespace = exports.LimitRangePatch = exports.LimitRangeList = exports.LimitRange = exports.EventPatch = exports.EventList = exports.Event = exports.EndpointsPatch = exports.EndpointsList = exports.Endpoints = exports.ConfigMapPatch = exports.ConfigMapList = exports.ConfigMap = exports.BindingPatch = exports.Binding = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
exports.Binding = null;
utilities.lazyLoad(exports, ["Binding"], () => require("./binding"));
exports.BindingPatch = null;
utilities.lazyLoad(exports, ["BindingPatch"], () => require("./bindingPatch"));
exports.ConfigMap = null;
utilities.lazyLoad(exports, ["ConfigMap"], () => require("./configMap"));
exports.ConfigMapList = null;
utilities.lazyLoad(exports, ["ConfigMapList"], () => require("./configMapList"));
exports.ConfigMapPatch = null;
utilities.lazyLoad(exports, ["ConfigMapPatch"], () => require("./configMapPatch"));
exports.Endpoints = null;
utilities.lazyLoad(exports, ["Endpoints"], () => require("./endpoints"));
exports.EndpointsList = null;
utilities.lazyLoad(exports, ["EndpointsList"], () => require("./endpointsList"));
exports.EndpointsPatch = null;
utilities.lazyLoad(exports, ["EndpointsPatch"], () => require("./endpointsPatch"));
exports.Event = null;
utilities.lazyLoad(exports, ["Event"], () => require("./event"));
exports.EventList = null;
utilities.lazyLoad(exports, ["EventList"], () => require("./eventList"));
exports.EventPatch = null;
utilities.lazyLoad(exports, ["EventPatch"], () => require("./eventPatch"));
exports.LimitRange = null;
utilities.lazyLoad(exports, ["LimitRange"], () => require("./limitRange"));
exports.LimitRangeList = null;
utilities.lazyLoad(exports, ["LimitRangeList"], () => require("./limitRangeList"));
exports.LimitRangePatch = null;
utilities.lazyLoad(exports, ["LimitRangePatch"], () => require("./limitRangePatch"));
exports.Namespace = null;
utilities.lazyLoad(exports, ["Namespace"], () => require("./namespace"));
exports.NamespaceList = null;
utilities.lazyLoad(exports, ["NamespaceList"], () => require("./namespaceList"));
exports.NamespacePatch = null;
utilities.lazyLoad(exports, ["NamespacePatch"], () => require("./namespacePatch"));
exports.Node = null;
utilities.lazyLoad(exports, ["Node"], () => require("./node"));
exports.NodeList = null;
utilities.lazyLoad(exports, ["NodeList"], () => require("./nodeList"));
exports.NodePatch = null;
utilities.lazyLoad(exports, ["NodePatch"], () => require("./nodePatch"));
exports.PersistentVolume = null;
utilities.lazyLoad(exports, ["PersistentVolume"], () => require("./persistentVolume"));
exports.PersistentVolumeClaim = null;
utilities.lazyLoad(exports, ["PersistentVolumeClaim"], () => require("./persistentVolumeClaim"));
exports.PersistentVolumeClaimList = null;
utilities.lazyLoad(exports, ["PersistentVolumeClaimList"], () => require("./persistentVolumeClaimList"));
exports.PersistentVolumeClaimPatch = null;
utilities.lazyLoad(exports, ["PersistentVolumeClaimPatch"], () => require("./persistentVolumeClaimPatch"));
exports.PersistentVolumeList = null;
utilities.lazyLoad(exports, ["PersistentVolumeList"], () => require("./persistentVolumeList"));
exports.PersistentVolumePatch = null;
utilities.lazyLoad(exports, ["PersistentVolumePatch"], () => require("./persistentVolumePatch"));
exports.Pod = null;
utilities.lazyLoad(exports, ["Pod"], () => require("./pod"));
exports.PodList = null;
utilities.lazyLoad(exports, ["PodList"], () => require("./podList"));
exports.PodPatch = null;
utilities.lazyLoad(exports, ["PodPatch"], () => require("./podPatch"));
exports.PodTemplate = null;
utilities.lazyLoad(exports, ["PodTemplate"], () => require("./podTemplate"));
exports.PodTemplateList = null;
utilities.lazyLoad(exports, ["PodTemplateList"], () => require("./podTemplateList"));
exports.PodTemplatePatch = null;
utilities.lazyLoad(exports, ["PodTemplatePatch"], () => require("./podTemplatePatch"));
exports.ReplicationController = null;
utilities.lazyLoad(exports, ["ReplicationController"], () => require("./replicationController"));
exports.ReplicationControllerList = null;
utilities.lazyLoad(exports, ["ReplicationControllerList"], () => require("./replicationControllerList"));
exports.ReplicationControllerPatch = null;
utilities.lazyLoad(exports, ["ReplicationControllerPatch"], () => require("./replicationControllerPatch"));
exports.ResourceQuota = null;
utilities.lazyLoad(exports, ["ResourceQuota"], () => require("./resourceQuota"));
exports.ResourceQuotaList = null;
utilities.lazyLoad(exports, ["ResourceQuotaList"], () => require("./resourceQuotaList"));
exports.ResourceQuotaPatch = null;
utilities.lazyLoad(exports, ["ResourceQuotaPatch"], () => require("./resourceQuotaPatch"));
exports.Secret = null;
utilities.lazyLoad(exports, ["Secret"], () => require("./secret"));
exports.SecretList = null;
utilities.lazyLoad(exports, ["SecretList"], () => require("./secretList"));
exports.SecretPatch = null;
utilities.lazyLoad(exports, ["SecretPatch"], () => require("./secretPatch"));
exports.Service = null;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));
exports.ServiceAccount = null;
utilities.lazyLoad(exports, ["ServiceAccount"], () => require("./serviceAccount"));
exports.ServiceAccountList = null;
utilities.lazyLoad(exports, ["ServiceAccountList"], () => require("./serviceAccountList"));
exports.ServiceAccountPatch = null;
utilities.lazyLoad(exports, ["ServiceAccountPatch"], () => require("./serviceAccountPatch"));
exports.ServiceList = null;
utilities.lazyLoad(exports, ["ServiceList"], () => require("./serviceList"));
exports.ServicePatch = null;
utilities.lazyLoad(exports, ["ServicePatch"], () => require("./servicePatch"));
// Export enums:
__exportStar(require("../../types/enums/core/v1"), exports);
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "kubernetes:core/v1:Binding":
                return new exports.Binding(name, undefined, { urn });
            case "kubernetes:core/v1:BindingPatch":
                return new exports.BindingPatch(name, undefined, { urn });
            case "kubernetes:core/v1:ConfigMap":
                return new exports.ConfigMap(name, undefined, { urn });
            case "kubernetes:core/v1:ConfigMapList":
                return new exports.ConfigMapList(name, undefined, { urn });
            case "kubernetes:core/v1:ConfigMapPatch":
                return new exports.ConfigMapPatch(name, undefined, { urn });
            case "kubernetes:core/v1:Endpoints":
                return new exports.Endpoints(name, undefined, { urn });
            case "kubernetes:core/v1:EndpointsList":
                return new exports.EndpointsList(name, undefined, { urn });
            case "kubernetes:core/v1:EndpointsPatch":
                return new exports.EndpointsPatch(name, undefined, { urn });
            case "kubernetes:core/v1:Event":
                return new exports.Event(name, undefined, { urn });
            case "kubernetes:core/v1:EventList":
                return new exports.EventList(name, undefined, { urn });
            case "kubernetes:core/v1:EventPatch":
                return new exports.EventPatch(name, undefined, { urn });
            case "kubernetes:core/v1:LimitRange":
                return new exports.LimitRange(name, undefined, { urn });
            case "kubernetes:core/v1:LimitRangeList":
                return new exports.LimitRangeList(name, undefined, { urn });
            case "kubernetes:core/v1:LimitRangePatch":
                return new exports.LimitRangePatch(name, undefined, { urn });
            case "kubernetes:core/v1:Namespace":
                return new exports.Namespace(name, undefined, { urn });
            case "kubernetes:core/v1:NamespaceList":
                return new exports.NamespaceList(name, undefined, { urn });
            case "kubernetes:core/v1:NamespacePatch":
                return new exports.NamespacePatch(name, undefined, { urn });
            case "kubernetes:core/v1:Node":
                return new exports.Node(name, undefined, { urn });
            case "kubernetes:core/v1:NodeList":
                return new exports.NodeList(name, undefined, { urn });
            case "kubernetes:core/v1:NodePatch":
                return new exports.NodePatch(name, undefined, { urn });
            case "kubernetes:core/v1:PersistentVolume":
                return new exports.PersistentVolume(name, undefined, { urn });
            case "kubernetes:core/v1:PersistentVolumeClaim":
                return new exports.PersistentVolumeClaim(name, undefined, { urn });
            case "kubernetes:core/v1:PersistentVolumeClaimList":
                return new exports.PersistentVolumeClaimList(name, undefined, { urn });
            case "kubernetes:core/v1:PersistentVolumeClaimPatch":
                return new exports.PersistentVolumeClaimPatch(name, undefined, { urn });
            case "kubernetes:core/v1:PersistentVolumeList":
                return new exports.PersistentVolumeList(name, undefined, { urn });
            case "kubernetes:core/v1:PersistentVolumePatch":
                return new exports.PersistentVolumePatch(name, undefined, { urn });
            case "kubernetes:core/v1:Pod":
                return new exports.Pod(name, undefined, { urn });
            case "kubernetes:core/v1:PodList":
                return new exports.PodList(name, undefined, { urn });
            case "kubernetes:core/v1:PodPatch":
                return new exports.PodPatch(name, undefined, { urn });
            case "kubernetes:core/v1:PodTemplate":
                return new exports.PodTemplate(name, undefined, { urn });
            case "kubernetes:core/v1:PodTemplateList":
                return new exports.PodTemplateList(name, undefined, { urn });
            case "kubernetes:core/v1:PodTemplatePatch":
                return new exports.PodTemplatePatch(name, undefined, { urn });
            case "kubernetes:core/v1:ReplicationController":
                return new exports.ReplicationController(name, undefined, { urn });
            case "kubernetes:core/v1:ReplicationControllerList":
                return new exports.ReplicationControllerList(name, undefined, { urn });
            case "kubernetes:core/v1:ReplicationControllerPatch":
                return new exports.ReplicationControllerPatch(name, undefined, { urn });
            case "kubernetes:core/v1:ResourceQuota":
                return new exports.ResourceQuota(name, undefined, { urn });
            case "kubernetes:core/v1:ResourceQuotaList":
                return new exports.ResourceQuotaList(name, undefined, { urn });
            case "kubernetes:core/v1:ResourceQuotaPatch":
                return new exports.ResourceQuotaPatch(name, undefined, { urn });
            case "kubernetes:core/v1:Secret":
                return new exports.Secret(name, undefined, { urn });
            case "kubernetes:core/v1:SecretList":
                return new exports.SecretList(name, undefined, { urn });
            case "kubernetes:core/v1:SecretPatch":
                return new exports.SecretPatch(name, undefined, { urn });
            case "kubernetes:core/v1:Service":
                return new exports.Service(name, undefined, { urn });
            case "kubernetes:core/v1:ServiceAccount":
                return new exports.ServiceAccount(name, undefined, { urn });
            case "kubernetes:core/v1:ServiceAccountList":
                return new exports.ServiceAccountList(name, undefined, { urn });
            case "kubernetes:core/v1:ServiceAccountPatch":
                return new exports.ServiceAccountPatch(name, undefined, { urn });
            case "kubernetes:core/v1:ServiceList":
                return new exports.ServiceList(name, undefined, { urn });
            case "kubernetes:core/v1:ServicePatch":
                return new exports.ServicePatch(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("kubernetes", "core/v1", _module);
//# sourceMappingURL=index.js.map