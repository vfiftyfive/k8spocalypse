import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
/**
 * Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system.
 */
export declare class Event extends pulumi.CustomResource {
    /**
     * Get an existing Event resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Event;
    /**
     * Returns true if the given object is an instance of Event.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Event;
    /**
     * What action was taken/failed regarding to the regarding object.
     */
    readonly action: pulumi.Output<string>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    readonly apiVersion: pulumi.Output<"events.k8s.io/v1beta1">;
    /**
     * Deprecated field assuring backward compatibility with core.v1 Event type
     */
    readonly deprecatedCount: pulumi.Output<number>;
    /**
     * Deprecated field assuring backward compatibility with core.v1 Event type
     */
    readonly deprecatedFirstTimestamp: pulumi.Output<string>;
    /**
     * Deprecated field assuring backward compatibility with core.v1 Event type
     */
    readonly deprecatedLastTimestamp: pulumi.Output<string>;
    /**
     * Deprecated field assuring backward compatibility with core.v1 Event type
     */
    readonly deprecatedSource: pulumi.Output<outputs.core.v1.EventSource>;
    /**
     * Required. Time when this Event was first observed.
     */
    readonly eventTime: pulumi.Output<string>;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    readonly kind: pulumi.Output<"Event">;
    readonly metadata: pulumi.Output<outputs.meta.v1.ObjectMeta>;
    /**
     * Optional. A human-readable description of the status of this operation. Maximal length of the note is 1kB, but libraries should be prepared to handle values up to 64kB.
     */
    readonly note: pulumi.Output<string>;
    /**
     * Why the action was taken.
     */
    readonly reason: pulumi.Output<string>;
    /**
     * The object this Event is about. In most cases it's an Object reporting controller implements. E.g. ReplicaSetController implements ReplicaSets and this event is emitted because it acts on some changes in a ReplicaSet object.
     */
    readonly regarding: pulumi.Output<outputs.core.v1.ObjectReference>;
    /**
     * Optional secondary object for more complex actions. E.g. when regarding object triggers a creation or deletion of related object.
     */
    readonly related: pulumi.Output<outputs.core.v1.ObjectReference>;
    /**
     * Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
     */
    readonly reportingController: pulumi.Output<string>;
    /**
     * ID of the controller instance, e.g. `kubelet-xyzf`.
     */
    readonly reportingInstance: pulumi.Output<string>;
    /**
     * Data about the Event series this event represents or nil if it's a singleton Event.
     */
    readonly series: pulumi.Output<outputs.events.v1beta1.EventSeries>;
    /**
     * Type of this event (Normal, Warning), new types could be added in the future.
     */
    readonly type: pulumi.Output<string>;
    /**
     * Create a Event resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: EventArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * The set of arguments for constructing a Event resource.
 */
export interface EventArgs {
    /**
     * What action was taken/failed regarding to the regarding object.
     */
    action?: pulumi.Input<string>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
     */
    apiVersion?: pulumi.Input<"events.k8s.io/v1beta1">;
    /**
     * Deprecated field assuring backward compatibility with core.v1 Event type
     */
    deprecatedCount?: pulumi.Input<number>;
    /**
     * Deprecated field assuring backward compatibility with core.v1 Event type
     */
    deprecatedFirstTimestamp?: pulumi.Input<string>;
    /**
     * Deprecated field assuring backward compatibility with core.v1 Event type
     */
    deprecatedLastTimestamp?: pulumi.Input<string>;
    /**
     * Deprecated field assuring backward compatibility with core.v1 Event type
     */
    deprecatedSource?: pulumi.Input<inputs.core.v1.EventSource>;
    /**
     * Required. Time when this Event was first observed.
     */
    eventTime: pulumi.Input<string>;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
     */
    kind?: pulumi.Input<"Event">;
    metadata?: pulumi.Input<inputs.meta.v1.ObjectMeta>;
    /**
     * Optional. A human-readable description of the status of this operation. Maximal length of the note is 1kB, but libraries should be prepared to handle values up to 64kB.
     */
    note?: pulumi.Input<string>;
    /**
     * Why the action was taken.
     */
    reason?: pulumi.Input<string>;
    /**
     * The object this Event is about. In most cases it's an Object reporting controller implements. E.g. ReplicaSetController implements ReplicaSets and this event is emitted because it acts on some changes in a ReplicaSet object.
     */
    regarding?: pulumi.Input<inputs.core.v1.ObjectReference>;
    /**
     * Optional secondary object for more complex actions. E.g. when regarding object triggers a creation or deletion of related object.
     */
    related?: pulumi.Input<inputs.core.v1.ObjectReference>;
    /**
     * Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
     */
    reportingController?: pulumi.Input<string>;
    /**
     * ID of the controller instance, e.g. `kubelet-xyzf`.
     */
    reportingInstance?: pulumi.Input<string>;
    /**
     * Data about the Event series this event represents or nil if it's a singleton Event.
     */
    series?: pulumi.Input<inputs.events.v1beta1.EventSeries>;
    /**
     * Type of this event (Normal, Warning), new types could be added in the future.
     */
    type?: pulumi.Input<string>;
}
