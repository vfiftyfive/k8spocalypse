"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountSettings = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an AWS QuickSight Account Settings.
 *
 * > Deletion of this resource will not modify any settings, only remove the resource from state.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const subscription = new aws.quicksight.AccountSubscription("subscription", {
 *     accountName: "quicksight-terraform",
 *     authenticationMethod: "IAM_AND_QUICKSIGHT",
 *     edition: "ENTERPRISE",
 *     notificationEmail: "notification@email.com",
 * });
 * const example = new aws.quicksight.AccountSettings("example", {terminationProtectionEnabled: false}, {
 *     dependsOn: [subscription],
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import QuickSight Account Settings using the AWS account ID. For example:
 *
 * ```sh
 * $ pulumi import aws:quicksight/accountSettings:AccountSettings example "012345678901"
 * ```
 */
class AccountSettings extends pulumi.CustomResource {
    /**
     * Get an existing AccountSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new AccountSettings(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AccountSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccountSettings.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["awsAccountId"] = state ? state.awsAccountId : undefined;
            resourceInputs["defaultNamespace"] = state ? state.defaultNamespace : undefined;
            resourceInputs["terminationProtectionEnabled"] = state ? state.terminationProtectionEnabled : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["awsAccountId"] = args ? args.awsAccountId : undefined;
            resourceInputs["defaultNamespace"] = args ? args.defaultNamespace : undefined;
            resourceInputs["terminationProtectionEnabled"] = args ? args.terminationProtectionEnabled : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AccountSettings.__pulumiType, name, resourceInputs, opts);
    }
}
exports.AccountSettings = AccountSettings;
/** @internal */
AccountSettings.__pulumiType = 'aws:quicksight/accountSettings:AccountSettings';
//# sourceMappingURL=accountSettings.js.map