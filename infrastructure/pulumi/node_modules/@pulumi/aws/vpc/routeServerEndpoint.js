"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.RouteServerEndpoint = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a resource for managing a VPC (Virtual Private Cloud) Route Server Endpoint.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.vpc.RouteServerEndpoint("test", {
 *     routeServerId: example.routeServerId,
 *     subnetId: main.id,
 *     tags: {
 *         Name: "Endpoint A",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import VPC (Virtual Private Cloud) Route Server Endpoint using the `route_server_endpoint_id`. For example:
 *
 * ```sh
 * $ pulumi import aws:vpc/routeServerEndpoint:RouteServerEndpoint example rse-12345678
 * ```
 */
class RouteServerEndpoint extends pulumi.CustomResource {
    /**
     * Get an existing RouteServerEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new RouteServerEndpoint(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of RouteServerEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RouteServerEndpoint.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["eniAddress"] = state ? state.eniAddress : undefined;
            resourceInputs["eniId"] = state ? state.eniId : undefined;
            resourceInputs["routeServerEndpointId"] = state ? state.routeServerEndpointId : undefined;
            resourceInputs["routeServerId"] = state ? state.routeServerId : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.routeServerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routeServerId'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            resourceInputs["routeServerId"] = args ? args.routeServerId : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["eniAddress"] = undefined /*out*/;
            resourceInputs["eniId"] = undefined /*out*/;
            resourceInputs["routeServerEndpointId"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RouteServerEndpoint.__pulumiType, name, resourceInputs, opts);
    }
}
exports.RouteServerEndpoint = RouteServerEndpoint;
/** @internal */
RouteServerEndpoint.__pulumiType = 'aws:vpc/routeServerEndpoint:RouteServerEndpoint';
//# sourceMappingURL=routeServerEndpoint.js.map