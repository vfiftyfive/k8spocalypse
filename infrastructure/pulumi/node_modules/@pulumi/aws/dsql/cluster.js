"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cluster = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Resource for managing an Amazon Aurora DSQL Cluster.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.dsql.Cluster("example", {
 *     deletionProtectionEnabled: true,
 *     tags: {
 *         Name: "TestCluster",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import DSQL Cluster using the `identifier`. For example:
 *
 * ```sh
 * $ pulumi import aws:dsql/cluster:Cluster example abcde1f234ghijklmnop5qr6st
 * ```
 */
class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Cluster(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["deletionProtectionEnabled"] = state ? state.deletionProtectionEnabled : undefined;
            resourceInputs["encryptionDetails"] = state ? state.encryptionDetails : undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["kmsEncryptionKey"] = state ? state.kmsEncryptionKey : undefined;
            resourceInputs["multiRegionProperties"] = state ? state.multiRegionProperties : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vpcEndpointServiceName"] = state ? state.vpcEndpointServiceName : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["deletionProtectionEnabled"] = args ? args.deletionProtectionEnabled : undefined;
            resourceInputs["kmsEncryptionKey"] = args ? args.kmsEncryptionKey : undefined;
            resourceInputs["multiRegionProperties"] = args ? args.multiRegionProperties : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["encryptionDetails"] = undefined /*out*/;
            resourceInputs["identifier"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["vpcEndpointServiceName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Cluster = Cluster;
/** @internal */
Cluster.__pulumiType = 'aws:dsql/cluster:Cluster';
//# sourceMappingURL=cluster.js.map