"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DirectoryBucketAccessPointScope = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Example Usage
 *
 * ### S3 Access Point Scope for a directory bucket in an AWS Local Zone
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const available = aws.getAvailabilityZones({
 *     state: "available",
 * });
 * const example = new aws.s3.DirectoryBucket("example", {
 *     bucket: "example--zoneId--x-s3",
 *     location: {
 *         name: available.then(available => available.zoneIds?.[0]),
 *     },
 * });
 * const exampleAccessPoint = new aws.s3.AccessPoint("example", {
 *     bucket: example.id,
 *     name: "example--zoneId--xa-s3",
 * });
 * const exampleDirectoryBucketAccessPointScope = new aws.s3control.DirectoryBucketAccessPointScope("example", {
 *     name: "example--zoneId--xa-s3",
 *     accountId: "123456789012",
 *     scope: {
 *         permissions: [
 *             "GetObject",
 *             "ListBucket",
 *         ],
 *         prefixes: [
 *             "myobject1.csv",
 *             "myobject2*",
 *         ],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Access Point Scope using access point name and AWS account ID separated by a colon (`,`). For example:
 *
 * ```sh
 * $ pulumi import aws:s3control/directoryBucketAccessPointScope:DirectoryBucketAccessPointScope example example--zoneid--xa-s3,123456789012
 * ```
 */
class DirectoryBucketAccessPointScope extends pulumi.CustomResource {
    /**
     * Get an existing DirectoryBucketAccessPointScope resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DirectoryBucketAccessPointScope(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DirectoryBucketAccessPointScope.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DirectoryBucketAccessPointScope.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.accountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountId'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DirectoryBucketAccessPointScope.__pulumiType, name, resourceInputs, opts);
    }
}
exports.DirectoryBucketAccessPointScope = DirectoryBucketAccessPointScope;
/** @internal */
DirectoryBucketAccessPointScope.__pulumiType = 'aws:s3control/directoryBucketAccessPointScope:DirectoryBucketAccessPointScope';
//# sourceMappingURL=directoryBucketAccessPointScope.js.map