import * as aws from "@pulumi/aws";
import * as pulumi from "@pulumi/pulumi";
import { AccessEntry, ClusterOptions, RoleMapping, UserMapping } from "./cluster";
export declare const CONFIG_MAP = "CONFIG_MAP";
export declare const API_AND_CONFIG_MAP = "API_AND_CONFIG_MAP";
export declare const API = "API";
export declare function validateAuthenticationMode(rawArgs: ClusterOptions): ClusterOptions;
export declare function supportsConfigMap(authenticationMode: string | undefined): boolean;
export declare function supportsAccessEntries(authenticationMode: string | undefined): boolean;
/**
 * Creates the AWS authentication data for the aws-auth ConfigMap.
 *
 * @param instanceRoles - The instance roles to be mapped.
 * @param roleMappings - The IAM role mappings to be included.
 * @param userMappings - The IAM user mappings to be included.
 * @returns The AWS authentication data for the aws-auth ConfigMap.
 * @throws Error if the IAM role mappings or user mappings are invalid or cannot be serialized to YAML.
 */
export declare function createAwsAuthData(instanceRoles: pulumi.Output<aws.iam.Role[]>, roleMappings: pulumi.Input<pulumi.Input<RoleMapping>[]> | undefined, userMappings: pulumi.Input<pulumi.Input<UserMapping>[]> | undefined): pulumi.Input<{
    [key: string]: pulumi.Input<string>;
}>;
export declare function createAccessEntries(componentName: string, clusterName: pulumi.Input<string>, accessEntries: {
    [key: string]: AccessEntry;
}, opts: pulumi.CustomResourceOptions): aws.eks.AccessEntry[];
