"use strict";
// Copyright 2016-2024, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const dependencies_1 = require("./dependencies");
const child_process_1 = require("child_process");
const which_1 = require("which");
jest.mock("child_process");
jest.mock("which");
function fakeKubectlVersionJson(v) {
    return `{"clientVersion": {"gitVersion": "${v}"},"kustomizeVersion": "v5.0.4-0.20230601165947-6ce0bf390ce3"}`;
}
function fakeAwsVersion(v) {
    return `aws-cli/${v} Python/3.8.8 Darwin/20.5.0 source/x86_64 prompt/off`;
}
describe("assertCompatibleKubectlVersionExists", () => {
    beforeEach(() => {
        which_1.default.sync.mockImplementation(() => "/fake/path/to/kubectl");
    });
    afterEach(() => {
        jest.resetAllMocks();
    });
    it("should throw if kubectl is not installed", () => {
        which_1.default.sync.mockImplementation(() => {
            throw new Error("Not found");
        });
        expect(() => {
            (0, dependencies_1.assertCompatibleKubectlVersionExists)();
        }).toThrow("kubectl is missing. See https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl for installation instructions.");
        expect(which_1.default.sync).toHaveBeenCalledWith("kubectl");
        expect(child_process_1.default.execSync).not.toHaveBeenCalled();
        expect(which_1.default.sync).toHaveBeenCalledTimes(1);
    });
    it("should throw if kubectl version is lower than v1.24.0", () => {
        child_process_1.default.execSync.mockImplementation(() => fakeKubectlVersionJson("v1.23.0"));
        expect(() => {
            (0, dependencies_1.assertCompatibleKubectlVersionExists)();
        }).toThrow("At least v1.24.0 of kubectl is required.");
        expect(which_1.default.sync).toHaveBeenCalledWith("kubectl");
        expect(child_process_1.default.execSync).toHaveBeenCalledTimes(1);
    });
    it("should throw if kubectl version is invalid", () => {
        child_process_1.default.execSync.mockImplementation(() => fakeKubectlVersionJson("fake-version"));
        expect(() => {
            (0, dependencies_1.assertCompatibleKubectlVersionExists)();
        }).toThrow("Invalid version");
        expect(which_1.default.sync).toHaveBeenCalledWith("kubectl");
        expect(child_process_1.default.execSync).toHaveBeenCalledTimes(1);
    });
    it("should not error if kubectl is v1.24.0", () => {
        child_process_1.default.execSync.mockImplementation(() => fakeKubectlVersionJson("v1.24.0"));
        expect(() => {
            (0, dependencies_1.assertCompatibleKubectlVersionExists)();
        }).not.toThrow();
        expect(which_1.default.sync).toHaveBeenCalledWith("kubectl");
        expect(child_process_1.default.execSync).toHaveBeenCalledTimes(1);
    });
    it("should not error if kubectl is greater than v1.24.0", () => {
        child_process_1.default.execSync.mockImplementation(() => fakeKubectlVersionJson("v1.29.6-gke.1400"));
        expect(() => {
            (0, dependencies_1.assertCompatibleKubectlVersionExists)();
        }).not.toThrow();
        expect(which_1.default.sync).toHaveBeenCalledWith("kubectl");
        expect(child_process_1.default.execSync).toHaveBeenCalledTimes(1);
    });
});
describe("assertCompatibleAWSCLIExists", () => {
    beforeEach(() => {
        which_1.default.sync.mockImplementation(() => "/fake/path/to/aws");
    });
    afterEach(() => {
        jest.resetAllMocks();
    });
    it("should throw if aws is not installed", () => {
        which_1.default.sync.mockImplementation(() => {
            throw new Error("Not found");
        });
        expect(() => {
            (0, dependencies_1.assertCompatibleAWSCLIExists)();
        }).toThrow("Could not find aws CLI for EKS.");
        expect(which_1.default.sync).toHaveBeenCalledWith("aws");
        expect(which_1.default.sync).toHaveBeenCalledTimes(1);
        expect(child_process_1.default.execSync).not.toHaveBeenCalled();
    });
    it("should throw if aws on major version 1, and less than minor version 24", () => {
        child_process_1.default.execSync.mockImplementation(() => fakeAwsVersion("1.18.0"));
        expect(() => {
            (0, dependencies_1.assertCompatibleAWSCLIExists)();
        }).toThrow("At least v1.24.0 of aws-cli is required");
        expect(which_1.default.sync).toHaveBeenCalledWith("aws");
        expect(which_1.default.sync).toHaveBeenCalledTimes(1);
        expect(child_process_1.default.execSync).toHaveBeenCalledTimes(1);
    });
    it("should throw if aws on major version 2, and less than minor version 7", () => {
        child_process_1.default.execSync.mockImplementation(() => fakeAwsVersion("2.5.20"));
        expect(() => {
            (0, dependencies_1.assertCompatibleAWSCLIExists)();
        }).toThrow("At least v2.7.0 of aws-cli is required");
        expect(which_1.default.sync).toHaveBeenCalledWith("aws");
        expect(which_1.default.sync).toHaveBeenCalledTimes(1);
        expect(child_process_1.default.execSync).toHaveBeenCalledTimes(1);
    });
    it("should not throw if aws on major version 1, and greater or equal than minor version 24", () => {
        child_process_1.default.execSync.mockImplementation(() => fakeAwsVersion("1.26.0"));
        expect(() => {
            (0, dependencies_1.assertCompatibleAWSCLIExists)();
        }).not.toThrow();
        expect(which_1.default.sync).toHaveBeenCalledWith("aws");
        expect(which_1.default.sync).toHaveBeenCalledTimes(1);
        expect(child_process_1.default.execSync).toHaveBeenCalledTimes(1);
    });
    it("should not throw if aws on major version 2, and greater or equal than minor version 7", () => {
        child_process_1.default.execSync.mockImplementation(() => fakeAwsVersion("2.7.20"));
        expect(() => {
            (0, dependencies_1.assertCompatibleAWSCLIExists)();
        }).not.toThrow();
        expect(which_1.default.sync).toHaveBeenCalledWith("aws");
        expect(which_1.default.sync).toHaveBeenCalledTimes(1);
        expect(child_process_1.default.execSync).toHaveBeenCalledTimes(1);
    });
});
//# sourceMappingURL=dependencies.test.js.map