"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.RandomShuffle = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * The resource `random.RandomShuffle` generates a random permutation of a list of strings given as an argument.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as random from "@pulumi/random";
 *
 * const az = new random.RandomShuffle("az", {
 *     inputs: [
 *         "us-west-1a",
 *         "us-west-1c",
 *         "us-west-1d",
 *         "us-west-1e",
 *     ],
 *     resultCount: 2,
 * });
 * const example = new aws.elb.LoadBalancer("example", {availabilityZones: az.results});
 * ```
 */
class RandomShuffle extends pulumi.CustomResource {
    /**
     * Get an existing RandomShuffle resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new RandomShuffle(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of RandomShuffle.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RandomShuffle.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["inputs"] = state ? state.inputs : undefined;
            resourceInputs["keepers"] = state ? state.keepers : undefined;
            resourceInputs["resultCount"] = state ? state.resultCount : undefined;
            resourceInputs["results"] = state ? state.results : undefined;
            resourceInputs["seed"] = state ? state.seed : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.inputs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'inputs'");
            }
            resourceInputs["inputs"] = args ? args.inputs : undefined;
            resourceInputs["keepers"] = args ? args.keepers : undefined;
            resourceInputs["resultCount"] = args ? args.resultCount : undefined;
            resourceInputs["seed"] = args ? args.seed : undefined;
            resourceInputs["results"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RandomShuffle.__pulumiType, name, resourceInputs, opts);
    }
}
exports.RandomShuffle = RandomShuffle;
/** @internal */
RandomShuffle.__pulumiType = 'random:index/randomShuffle:RandomShuffle';
//# sourceMappingURL=randomShuffle.js.map